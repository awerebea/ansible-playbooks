---
- name: Rsync dotfiles (Zsh, Vim, Tmux).
  ansible.posix.synchronize:
    src: '{{ dotfiles_path }}/'
    dest: ~/
    archive: true
    checksum: true
    rsync_opts:
      - "--prune-empty-dirs"  # to sync only included files
      - "--include='.vimrc'"
      - "--include='.zshrc'"
      - "--include='.p10k.zsh'"
      - "--include='.tmux.conf'"
      - "--include='.tmux.conf.local'"
      - "--exclude='*'"       # to sync only included files
  register: dotfiles_sync_result
  changed_when: >
    not dotfiles_sync_result.stdout_lines == []
    and not (dotfiles_sync_result.stdout_lines | length == 1
    and dotfiles_sync_result.stdout_lines[0] == '.d..t...... ./')
  delegate_to: localhost

- name: Ensure the ~/.config/nvim directory exists.
  file:
    path: ~/.config/nvim
    state: directory
    mode: 0755

- name: Ensure the link to ~/.vimrc for Neovim exists.
  file:
    src: '~/.vimrc'
    dest: '~/.config/nvim/init.vim'
    state: link

- name: Rsync dotfiles (Ranger).
  ansible.posix.synchronize:
    src: '{{ dotfiles_path }}/ranger'
    dest: ~/.config/
    checksum: true
    recursive: true
    delete: true
    rsync_opts:
      - "--exclude='*.pyc'"
      - "--exclude='__init__.py'"
      - "--exclude='*/__pycache__'"
  register: ranger_files
  changed_when: >
    ranger_files.stdout_lines | length != 0
    and not (ranger_files.stdout_lines | length == 1
    and ranger_files.stdout_lines[0] == '.d..t...... ranger/plugins/')
  delegate_to: localhost

- name: Ensure the ~/.local/bin directory exists.
  file:
    path: ~/.local/bin
    state: directory
    mode: 0755

- block:
    - name: Collect list of all Ranger scripts.
      find:
        paths: ~/.config/ranger/scripts/
      register: ranger_scripts_find

    - name: Ensure links to all Ranger scripts exist.
      file:
        src: '{{ item.path }}'
        path: '~/.local/bin/{{ item.path | basename }}'
        state: link
      with_items: '{{ ranger_scripts_find.files }}'
  when: ranger_files.changed

- name: Rsync Git tools.
  ansible.posix.synchronize:
    src: '{{ dotfiles_path }}/Git/'
    dest: ~/.local/bin/
    archive: true
    checksum: true
    rsync_opts:
      - "--include='extDiff'"
      - "--include='extMerge'"
      - "--include='menos'"
      - "--exclude='*'"       # to sync only included files
  register: git_tools_sync_result
  changed_when: >
    git_tools_sync_result.stdout_lines | length != 0
    and not (git_tools_sync_result.stdout_lines | length == 1
    and git_tools_sync_result.stdout_lines[0] == '.d..t...... ./')
  delegate_to: localhost

- name: Backup user name and email values from the global Git config.
  community.general.git_config:
    name: user.{{ item }}
    scope: global
  with_items: ['name', 'email']
  register: gitconfig_user

- name: Remove user name and email values from the global Git config.
  community.general.git_config:
    name: user.{{ item }}
    scope: global
    state: absent
  with_items: ['name', 'email']
  changed_when: false

- name: Remove user.email value from the global Git config.
  community.general.git_config:
    name: user.email
    scope: global
    state: absent

- name: Rsync global Git config.
  ansible.posix.synchronize:
    src: '{{ dotfiles_path }}/Git/'
    dest: ~/
    archive: true
    checksum: true
    times: false
    rsync_opts:
      - "--prune-empty-dirs"  # to sync only included files
      - "--include='.gitconfig'"
      - "--exclude='*'"       # to sync only included files
  register: git_config_sync_result
  changed_when: >
    git_config_sync_result.stdout_lines | length != 0
    and not (git_config_sync_result.stdout_lines | length == 1
    and git_config_sync_result.stdout_lines[0] == '.d..t...... ./')
  delegate_to: localhost

- name: Restore user name and email values from backup to global Git config.
  community.general.git_config:
    name: user.{{ item.item }}
    scope: global
    value: '{{ item.config_value }}'
  with_items: '{{ gitconfig_user.results }}'
  changed_when: false

- name: Rsync other useful scripts.
  ansible.posix.synchronize:
    src: '{{ dotfiles_path }}/scripts/'
    dest: ~/.local/bin/
    archive: true
    checksum: true
    rsync_opts:
      - "--prune-empty-dirs"  # to sync only included files
      - "--include='git-conf-user'"
      - "--include='global-gitignore'"
      - "--include='terraform-check'"
      - "--include='terraform-watch'"
      - "--include='vimv'"
      - "--exclude='*'"       # to sync only included files
  register: scripts_sync_result
  changed_when: >
    scripts_sync_result.stdout_lines | length != 0
    and not (scripts_sync_result.stdout_lines | length == 1
    and scripts_sync_result.stdout_lines[0] == '.d..t...... ./')
  delegate_to: localhost
