---
# Install Node with Nvm

- name: Set source_nvm variable with commands sequence.
  set_fact:
    source_nvm: |-
      export NVM_DIR="$HOME/.nvm"
      [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

- name: Check Nvm version.
  shell: '{{ source_nvm }} && nvm -v'
  args:
    executable: /usr/bin/bash
  changed_when: false
  failed_when: false
  register: nvm_curr_ver

- name: Filter current version stdout.
  set_fact:
    nvm_current_ver: '{{ nvm_curr_ver.stdout |
    regex_search("[0-9]{1,}(\.[0-9]{1,}){0,2}") }}'
  when: nvm_curr_ver.rc == 0

- name: Filter desired Nvm version.
  set_fact:
    nvm_desired_ver: '{{ nvm_ver |
    regex_search("[0-9]{1,}(\.[0-9]{1,}){0,2}") }}'
  when: nvm_ver is defined

- block:
    - block:
        - name: Ensure pip3 is installed.
          apt:
            name: python3-pip
            state: present
          become: true

        - name: Ensure required python module is installed.
          pip:
            name: github3.py

        - name: Get latest release tag.
          community.general.github_release:
            user: nvm-sh
            repo: nvm
            action: latest_release
          register: nvm_latest_release

        - name: Filter release number.
          set_fact:
            nvm_latest_release_tag: '{{ nvm_latest_release.tag |
            regex_search("([0-9]{1,}\.)+[0-9]{1,}") }}'

      when: nvm_ver is not defined

    - name: Ensure curl is installed.
      apt:
        name: curl
        state: present
      become: true

    - name: Install Nvm.
      shell: "set -o pipefail && curl -o- https://raw.githubusercontent.com/\
      nvm-sh/nvm/v{{ nvm_desired_ver if nvm_desired_ver is defined
      else nvm_latest_release_tag }}/install.sh | bash"
      args:
        executable: /usr/bin/bash

    - name: Add the lines to load Nvm to ~/.bashrc.
      blockinfile:
        path: ~/.bashrc
        block: >
          export NVM_DIR="$HOME/.nvm"

          [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm

          [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
          # This loads nvm bash_completion
        state: present
        backup: false

  when: >
    nvm_curr_ver.rc != 0
    or (nvm_desired_ver is defined
    and nvm_current_ver is
    version(nvm_desired_ver, '!=', version_type='strict'))
    or (update_apps is defined
    and ('all' in update_apps or 'nvm' in update_apps))

- name: Check Node version.
  shell: >
    set -o pipefail && {{ source_nvm }} && node -v |
    grep -Eo "[0-9]{1,}(\.[0-9]{1,}){0,}" | head -n1
  args:
    executable: /usr/bin/bash
  changed_when: false
  failed_when: false
  register: node_curr_ver

- name: Filter current version stdout.
  set_fact:
    node_current_ver: '{{ node_curr_ver.stdout |
    regex_search("[0-9]{1,}(\.[0-9]{1,}){0,2}") }}'
  when: node_curr_ver.rc == 0

- block:
    - name: Filter desired Node version.
      set_fact:
        node_desired_ver: '{{ node_ver |
        regex_search("[0-9]{1,}(\.[0-9]{1,}){0,2}") }}'

    - name: Define Node release num.
      set_fact:
        node_release_num: >-
          {{ node_desired_ver if node_desired_ver != ''
          else '--lts' if node_ver == 'lts' or node_ver == '--lts'
          else 'node' if node_ver == 'node' else 'release_codename' }}

  when: node_ver is defined

- block:
    - name: Identify the version number from the release codename.
      shell: >
        set -o pipefail && {{ source_nvm }} && nvm ls-remote --no-colors |
        grep -i "latest.*{{ node_ver }}" |
        grep -Eo "[0-9]{1,}(\.[0-9]{1,}){0,}" | head -n1
      args:
        executable: /usr/bin/bash
      changed_when: false
      failed_when: false
      register: release_codename_num

    - name: Re-define Node release num.
      set_fact:
        node_release_num: '{{ release_codename_num.stdout }}'

  when: node_release_num is defined and node_release_num == 'release_codename'

- name: Install Node.
  shell: >
    {{ source_nvm }} && nvm install --default
    {{ node_release_num | default('node') }}
  args:
    executable: /usr/bin/bash
  when: >
    node_curr_ver.rc != 0
    or (node_release_num is defined
    and ((node_release_num == '--lts' or node_release_num == 'node')
    or node_current_ver is
    version(node_release_num, '!=', version_type='strict')))
    or (update_apps is defined
    and ('all' in update_apps or 'node' in update_apps))
