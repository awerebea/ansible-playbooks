---
# Install Ranger (filemanager) from sources

- name: Check Ranger version.
  shell: >
    set -o pipefail && ranger --version | head -n1 |
    grep -Eo "([0-9]{1,}(\.[0-9]{1,}){0,}|ranger-master)" | head -n1
  args:
    executable: /usr/bin/bash
  changed_when: false
  failed_when: false
  register: ranger_curr_ver

- name: Filter current version stdout.
  set_fact:
    current_ver: '{{ ranger_curr_ver.stdout |
      regex_search("[0-9]{1,}(\.[0-9]{1,}){0,2}") }}'
  when: ranger_curr_ver.rc == 0

- name: Filter min Ranger version.
  set_fact:
    min_ver: '{{ ranger_min_ver |
      regex_search("[0-9]{1,}(\.[0-9]{1,}){0,2}") }}'
  when: ranger_min_ver is defined and ranger_ver is not defined

- name: Filter desired Ranger version.
  set_fact:
    desired_ver: '{{ ranger_ver |
      regex_search("[0-9]{1,}(\.[0-9]{1,}){0,2}") }}'
  when: ranger_ver is defined

- name: DEBUG
  debug:
    var: ranger_curr_ver
  when: debug_mode is defined

- block:
    - name: Ensure the ~/build directory exists.
      file:
        path: ~/build
        state: directory
        mode: 0755

    - block:
        - name: Clone Ranger repository from GitHub.
          git:
            repo: https://github.com/ranger/ranger.git
            dest: ~/build/ranger
            version: "{{ 'v' + desired_ver if (desired_ver is defined)
              else 'master' }}"

      rescue:
        - name: Remove local Ranger repo directory in case of cloning failure.
          file:
            path: ~/build/ranger
            state: absent

        - name: >
            Try to cleanly clone the Ranger repository after a failed attempt.
          git:
            repo: https://github.com/ranger/ranger.git
            dest: ~/build/ranger
            version: "{{ 'v' + desired_ver if (desired_ver is defined)
              else 'master' }}"

    - name: Install Ranger.
      shell: cd ~/build/ranger/ && sudo make install

  when: >
    ranger_curr_ver.rc !=0
    or ranger_curr_ver.stdout != 'ranger-master'
    and ((min_ver is defined and desired_ver is not defined
    and current_ver is version(min_ver, '<', version_type='strict'))
    or (desired_ver is defined
    and current_ver is version(desired_ver, '!=', version_type='strict')))
    or (update_apps is defined
    and ('all' in update_apps or 'ranger' in update_apps))
