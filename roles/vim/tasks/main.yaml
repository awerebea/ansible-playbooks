---
# Install Vim from sources with lua support

- name: Check if Vim is an alias.
  shell: set -o pipefail && command -v vim | cut -d=  -f1
  args:
    executable: /usr/bin/bash
  changed_when: false
  failed_when: false
  register: vim_command

- name: Unalias Vim.
  command: unalias vim
  changed_when: false
  failed_when: false
  when: vim_command.stdout == 'alias vim'

- name: Check Vim version.
  shell: >
    set -o pipefail && vim --version |
    sed -n 1,2p | grep -Eo "(([0-9]{1,}\.)+[0-9]{1,}|-[0-9]+)" |
    tr -d '\n' | tr - .
  args:
    executable: /usr/bin/bash
  changed_when: false
  failed_when: false
  register: vim_curr_ver

- name: DEBUG
  debug:
    var: vim_curr_ver
  when: debug_mode is defined

- name: Check Vim features.
  shell: set -o pipefail && vim --version | sed -n -e '/^\(+\|-\)/p'
  args:
    executable: /usr/bin/bash
  changed_when: false
  failed_when: false
  register: vim_features

- name: DEBUG
  debug:
    var: vim_features
  when: debug_mode is defined

- name: Filter current version stdout.
  set_fact:
    vim_current_ver: '{{ vim_curr_ver.stdout |
    regex_search("[0-9]{1,}(\.[0-9]{1,}){0,2}") }}'
  when: vim_curr_ver.rc == 0

- name: Filter min Vim version.
  set_fact:
    vim_minimum_ver: '{{ vim_min_ver |
    regex_search("[0-9]{1,}(\.[0-9]{1,}){0,2}") }}'
  when: vim_min_ver is defined and vim_ver is not defined

- name: Filter desired Vim version.
  set_fact:
    vim_desired_ver: '{{ vim_ver |
    regex_search("[0-9]{1,}(\.[0-9]{1,}){0,2}") }}'
  when: vim_ver is defined

- block:
    - name: Ensure Vim dependencies are installed.
      apt:
        name:
          - gcc
          - liblua5.3-dev
          - xorg-dev
          - python3-pip   # to prevent configure error while checking python dir
        state: present
      become: true

    - name: Ensure lua links exist.
      file:
        src: '/usr/{{ item.src }}'
        dest: '/usr/{{ item.dest }}'
        state: link
      loop:
        - {src: include/lua5.3/lua.h, dest: include/lua.h}
        - {src: include/lua5.3/luaconf.h, dest: include/luaconf.h}
        - {src: include/lua5.3/lualib.h, dest: include/lualib.h}
        - {src: include/lua5.3/lauxlib.h, dest: include/lauxlib.h}
        - {src: lib/x86_64-linux-gnu/liblua5.3.so.0.0.0, dest: lib/liblua.so}
      become: true

    - block:
        - name: Ensure the ~/build directory exists.
          file:
            path: ~/build
            state: directory
            mode: 0755

        - name: Clone Vim repository from GitHub.
          git:
            repo: https://github.com/vim/vim.git
            dest: ~/build/vim
            version: "{{ 'v' + vim_desired_ver if (vim_desired_ver is defined)
            else 'master' }}"

      rescue:
        - name: Remove local Vim repo directory in case of cloning failure.
          file:
            path: ~/build/vim
            state: absent

        - name: Try to cleanly clone the Vim repository after a failed attempt.
          git:
            repo: https://github.com/vim/vim.git
            dest: ~/build/vim
            version: "{{ 'v' + vim_desired_ver if (vim_desired_ver is defined)
            else 'master' }}"

    - name: Configure Vim.
      shell: cd ~/build/vim/ || exit 1; \
        ./configure \
        --enable-multibyte \
        --with-features=huge \
        --enable-luainterp=dynamic \
        --enable-python3interp=dynamic \
        --enable-cscope \
        --enable-gui=auto \
        --enable-fontset \
        --enable-largefile \
        --disable-netbeans \
        --with-x \
        --enable-fail-if-missing

    - block:
        - name: Compile and install Vim.
          shell: cd ~/build/vim/ && make && sudo make install

      rescue:
        - name: Clean, compile and install Vim if first apttempt failed.
          shell: cd ~/build/vim/ && make clean && make && sudo make install

  when: >
    vim_curr_ver.rc !=0
    or (vim_minimum_ver is defined and vim_desired_ver is not defined
    and vim_current_ver is version(vim_minimum_ver, '<', version_type='strict'))
    or (vim_desired_ver is defined
    and vim_current_ver is
    version(vim_desired_ver, '!=', version_type='strict'))
    or not '+clipboard' in vim_features.stdout
    or not '+xterm_clipboard' in vim_features.stdout
    or (update_apps is defined
    and ('all' in update_apps or 'vim' in update_apps))
