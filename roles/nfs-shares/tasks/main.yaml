---
# Install an NFS server and set up a shared home directory with a default subnet

- name: Ensure Nfs server is installed.
  apt:
    name:
      - nfs-common
      - nfs-kernel-server
    state: present
  become: true

- name: Ensure required python module is installed.
  pip:
    name: netaddr

- name: Define the default network interface subnet.
  set_fact:
    nfs_subnet: "{{ ansible_default_ipv4.network }}/\
    {{ (ansible_default_ipv4.address + '/' + ansible_default_ipv4.netmask) |
    ipaddr('prefix') }}"

- name: Creating multiple by checking directories.
  block:
    - name: Check directories to export.
      stat:
        path: '{{ item }}'
      register: nfs_dirstatus
      with_items: "{{ nfs_exports | json_query('[*].path') }}"

    - name: 'Creat multiple directories as root user without disturbing previous
        permissions.'
      file:
        path: '{{ item.item }}'
        state: directory
        mode: 0755
      when: item.stat.exists is false
      loop: '{{ nfs_dirstatus.results }}'
      become: true

    - name: Set the desired permissions for the export directories.
      file:
        path: '{{ item.path }}'
        state: directory
        mode: '{{ item.mode if item.mode is defined }}'
        owner: '{{ item.owner }}'
        group: '{{ item.owner }}'
      when: item.owner is defined
      loop: '{{ nfs_exports }}'
      become: true

- name: Prepare raw strings for exports file.
  set_fact:
    nfs_raw_lines: "{{ (nfs_raw_lines | default([])) + [(item.path, item |
    json_query('clients[*].[address,directives]') | map('join', '(') |
    product([')']) | map('join', '') | join(' ')) | join(' ') |
    replace('((', '(')] }}"
  with_items: '{{ nfs_exports }}'

- name: Filter out double closing parentheses in strings.
  set_fact:
    nfs_filtered_lines: "{{ (nfs_filtered_lines | default([])) + [item |
    replace('))', ')')] }}"
  with_items: '{{ nfs_raw_lines }}'

- name: Ensure shared directories are in exports file.
  lineinfile:
    dest: /etc/exports
    line: "{{ item | replace('subnet', nfs_subnet) }}"
    state: present
    create: true
    mode: 0644
  with_items: '{{ nfs_filtered_lines }}'
  become: true
  notify: Restart nfs-server

- block:
    - name: Setup autofs service on the localhost.
      block:
        - name: Ensure Autofs is installed locally.
          apt:
            name: autofs
            state: present
          become: true

        - name: Check the local autofs mount directory status.
          stat:
            path: '{{ nfs_local_autofs_mounts_path }}'
          register: nfs_autofs_mounts_dirstatus

        - name: Ensure the local autofs mount directory exists.
          file:
            path: '{{ nfs_local_autofs_mounts_path }}'
            state: directory
            mode: 0755
          become: true
          when: nfs_autofs_mounts_dirstatus.stat.exists is false

        - name: Check the /etc/autofs directory status.
          stat:
            path: /etc/autofs
          register: nfs_autofs_dirstatus

        - name: Check the /etc/autofs/auto.{{ inventory_hostname }} file status.
          stat:
            path: /etc/autofs/auto.{{ inventory_hostname }}
          register: nfs_autofs_host_filestatus

        - name: Ensure the shares of the remote host are configured for autofs.
          lineinfile:
            dest: /etc/autofs/auto.{{ inventory_hostname }}
            line: >-
              "{{ item | regex_replace('^/|/$', '') | replace('/', '_') }}"
              -rw,soft,intr,rsize=8192,wsize=8192
              {{ ansible_host }}:{{ item }}
            state: present
            create: true
            mode: 0644
          with_items: "{{ nfs_exports | json_query('[*].path') }}"
          become: >-
            {{ not ((nfs_autofs_host_filestatus.stat.exists
            and nfs_autofs_host_filestatus.stat.writeable)
            or (not nfs_autofs_host_filestatus.stat.exists
            and nfs_autofs_dirstatus.stat.writeable)) }}
          notify: Restart autofs

        - name: Check the /etc/autofs/auto.master file status.
          stat:
            path: /etc/autofs/auto.master
          register: nfs_autofs_master_filestatus

        - name: 'Ensure the remote host autofs config file is included to
          /etc/autofs/auto.master.'
          lineinfile:
            dest: /etc/autofs/auto.master
            line: "{{ nfs_local_autofs_mounts_path }}/\
            {{ inventory_hostname }} /etc/autofs/auto.{{ inventory_hostname }}
            --timeout 60 -browse"
            state: present
            create: true
            mode: 0644
          become: '{{ not (nfs_autofs_master_filestatus.stat.exists
            and nfs_autofs_master_filestatus.stat.writeable) }}'
          notify: Restart autofs

      delegate_to: localhost

  when: >
    (nfs_setup_autofs is true | default(false)) and ansible_host is defined
    and ansible_host != 'localhost' and ansible_host != '127.0.0.1'
