---
# Install Kubectl

- name: Check Kubectl version.
  shell: >
    set -o pipefail && kubectl version --client --short |
    grep -Eo "[0-9]{1,}(\.[0-9]{1,}){0,}" | head -n1
  args:
    executable: /usr/bin/bash
  changed_when: false
  failed_when: false
  register: kubectl_curr_ver

- block:
    - name: Import a variable containing a Bash script to compare versions.
      include_role:
        name: version-compare-function

    - name: Compare installed and desired kubectl versions.
      shell: |
        {{ ver_comp_func }}
        vercomp '{{ kubectl_curr_ver.stdout }}' '{{ kubectl_ver }}'
      args:
        executable: /usr/bin/bash
      changed_when: false
      failed_when: false
      register: compare_result

  when: kubectl_curr_ver.rc == 0 and kubectl_ver is defined

- block:
    - name: Ensure the Kubernetes apt repository dependencies are installed.
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
        state: present
      become: true

    - name: Add Google Cloud public signing key.
      apt_key:
        url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
        state: present
        keyring: /usr/share/keyrings/kubernetes-archive-keyring.gpg
      become: true

    - name: Add the Kubernetes apt repository.
      apt_repository:
        repo: >
          deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg]
          https://apt.kubernetes.io/ kubernetes-xenial main
        state: present
        update_cache: true
      become: true
      register: repo

    - name: Install Kubectl.
      apt:
        name: "{{ kubectl_ver | default('kubectl') }}"
        state: present
        force: true
      become: true

  when: >
    kubectl_curr_ver.rc !=0 or
    (compare_result.rc is defined and compare_result.rc != 0)
