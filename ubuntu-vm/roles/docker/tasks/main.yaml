---
# Install Docker with secure daemon remote settings
- name: Check if key files and certificates already exist.
  stat:
    path: '{{ files }}'
  with_items:
    - '{{ dds_server_cert_path }}/ca.pem'
    - '{{ dds_server_cert_path }}/server-cert.pem'
    - '{{ dds_server_cert_path }}/server-key.pem'
    - '{{ dds_client_cert_path }}/ca.pem'
    - '{{ dds_client_cert_path }}/cert.pem'
    - '{{ dds_client_cert_path }}/key.pem'
  loop_control:
    loop_var: files
  register: check_files

- name: Define a flag variable if needed file is missing.
  set_fact:
    file_is_missed: true
  when: not files.stat.exists
  with_items:
    '{{ check_files.results }}'
  loop_control:
    loop_var: files

- block:
    - name: Ensure OpenSSL is installed.
      apt:
        name: openssl
        state: present
      become: true

    - name: 'Generate the key files and certificates needed to secure the Docker
        daemon.'
      include_role:
        name: role-secure-docker-daemon
        apply:
          become: true

  when: file_is_missed is defined

- name: Ensure the ~/.docker/ssl/{{ ansible_host }} directory exists.
  file:
    path: ~/.docker/ssl/{{ ansible_host }}
    state: directory
    mode: 0755
  delegate_to: localhost

- name: Sync client certificates from the remote server.
  ansible.posix.synchronize:
    src: '{{ dds_client_cert_path }}/'
    dest: ~/.docker/ssl/{{ ansible_host }}/
    archive: true
    checksum: true
    rsync_opts:
      - "--include='ca.pem'"
      - "--include='cert.pem'"
      - "--include='key.pem'"
      - "--exclude='*'"       # to sync only included files
    mode: pull
  register: result
  changed_when: >
    not result.stdout_lines == [] and
    not (result.stdout_lines | length == 1 and
    result.stdout_lines[0] == '.d..t...... ./')

- block:
    - name: Install Docker.
      include_role:
        name: ansible-role-docker
        apply:
          become: true

  rescue:
    - name: 'In case of failure, fix Docker daemon systemd service and restart
        it again.'
      lineinfile:
        dest: /usr/lib/systemd/system/docker.service
        state: present
        regexp: '^ExecStart='
        line: 'ExecStart=/usr/bin/dockerd
          --containerd=/run/containerd/containerd.sock'
      become: true
      notify: Reload and restart the Docker daemon

    - name: 'Ensure handlers are notified now to avoid conflicts in the
        following tasks.'
      meta: flush_handlers

    - name: Continue Docker installation.
      include_role:
        name: ansible-role-docker
        apply:
          become: true
