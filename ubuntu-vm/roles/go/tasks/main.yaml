---
# Install Go

- name: Check Go version.
  shell: >
    set -o pipefail && go version |
    grep -Eo "[0-9]{1,}(\.[0-9]{1,}){0,}" | head -n1
  args:
    executable: /usr/bin/bash
  changed_when: false
  failed_when: false
  register: go_curr_ver

- block:
    - name: Import a variable containing a Bash script to compare versions.
      include_role:
        name: version-compare-function

    - name: Compare installed and min Go versions.
      shell: |
        {{ ver_comp_func }}
        vercomp '{{ go_curr_ver.stdout }}' '{{ go_min_ver }}'
      args:
        executable: /usr/bin/bash
      changed_when: false
      failed_when: false
      register: compare_min_result
      when: go_min_ver is defined and go_ver is not defined

    - name: Compare installed and desired Go versions.
      shell: |
        {{ ver_comp_func }}
        vercomp '{{ go_curr_ver.stdout }}' '{{ go_ver }}'
      args:
        executable: /usr/bin/bash
      changed_when: false
      failed_when: false
      register: compare_result
      when: go_ver is defined

  when: >
    go_curr_ver.rc == 0
    and (go_ver is defined or go_min_ver is defined)

- block:
    - name: Ensure release number is defined properly.
      set_fact:
        release_num: 'go{{ go_ver | regex_search("([0-9]{1,}\.)+[0-9]{1,}") }}'
      when: go_ver is defined and go_ver != 'latest'

    - name: Get the latest Go binary version number.
      set_fact:
        release_num: '{{ lookup("url", "https://go.dev/VERSION?m=text",
          split_lines=False) }}'
      when: go_ver is not defined or (go_ver is defined and go_ver == 'latest')

    - name: Ensure the Go install path is clean.
      file:
        path: "{{ go_install_path | default('/usr/local') }}/go"
        state: absent
        mode: 0755
      become: true

    - name: Ensure the Go installation directory exists.
      file:
        path: "{{ go_install_path | default('/usr/local') }}"
        state: directory
        mode: 0755

    - name: 'Download and extract the archive
        {{ release_num }}.linux-amd64.tar.gz.'
      unarchive:
        src: 'https://dl.google.com/go/{{ release_num }}.linux-amd64.tar.gz'
        dest: "{{ go_install_path | default('/usr/local') }}"
        remote_src: true
      become: true

    - name: Ensure the Go install path is in the system PATH.
      lineinfile:
        dest: '{{ item }}'
        line: "export PATH=\"$PATH:\
          {{ go_install_path | default('/usr/local') }}/go/bin\""
        state: present
        backup: false
      with_items:
        - ~/.profile
        - ~/.bashrc
        - ~/.zshenv

  when: >
    go_curr_ver.rc !=0
    or (compare_min_result.rc is defined and compare_min_result.rc == 2)
    or (compare_result.rc is defined and compare_result.rc != 0)
